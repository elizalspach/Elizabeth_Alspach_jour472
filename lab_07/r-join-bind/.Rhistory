library(tidyverse)
###
# Total population for each Maryland county
# County identified by GEOID (a 5-digit code), not name
###
maryland_county_population <- read_rds("assets/data/maryland_county_population.rds")
###
# A lookup table that shows the name of each Maryland county, paired with GEOID
###
maryland_county_lookup_table <- read_rds("assets/data/maryland_county_lookup_table.rds")
###
# Total population for each Maryland county, EXCEPT for Prince George's County
# County identified by GEOID (a 5-digit code), not name
###
maryland_county_population_no_pg <- read_rds("assets/data/maryland_county_population_no_pg.rds")
###
# Display the tables
###
maryland_county_population
maryland_county_lookup_table
maryland_county_population_no_pg
updated_maryland_county_population <- maryland_county_lookup_table %>%
inner_join(maryland_county_population, by="geoid")
updated_maryland_county_population
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
inner_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
if (knitr::is_html_output())
knitr::include_graphics("assets/inner-join.gif")
# ![inner join](assets/inner-join.gif){width="100%"}
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
left_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
if (knitr::is_html_output())
knitr::include_graphics("assets/left-join.gif")
if (knitr::is_html_output())
knitr::include_graphics("assets/right-join.gif")
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
anti_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
if (knitr::is_html_output())
knitr::include_graphics("assets/anti-join.gif")
if (knitr::is_html_output())
knitr::include_graphics("assets/left-join-extra.gif")
###
# Total population for each top-10 largest Maryland county
# County identified by GEOID (a 5-digit code) and name
###
maryland_large_county_population <- read_rds("assets/data/maryland_large_county_population.rds")
###
# Total population for all other Maryland counties
# County identified by GEOID (a 5-digit code) and name
###
maryland_small_county_population <- read_rds("assets/data/maryland_small_county_population.rds")
# Display
maryland_large_county_population
maryland_small_county_population
all_county_population <- maryland_small_county_population %>%
bind_rows(maryland_large_county_population)
all_county_population
rio::import("maryland_tracts.xls")
rio::import("md_counties_geoids.txt")
md_tracts <- rio::import("maryland_tracts.xls") %>%
clean_names()
md_tracts <- rio::import("maryland_tracts.xls") %>%
clean_name()
md_tracts <- rio::import("maryland_tracts.xls") %>%
clean_names
md_tracts <- rio::import("maryland_tracts.xls")%>%
clean_names()
md_tracts <- rio::import("maryland_tracts.xls")
md_counties <- rio::import("md_counties_geoids.txt")
View(md_counties)
View(md_tracts)
md_tracts <- rio::import("maryland_tracts.xls")
md_counties <- rio::import("md_counties_geoids.txt")
md_smith_data <- md_tracts %>%
inner_join(md_counties, by=c("cty"="GEOID"))
md_tracts <- rio::import("maryland_tracts.xls")
md_counties <- rio::import("md_counties_geoids.txt")
md_smith_data <- md_tracts %>%
inner_join(md_counties, by=c("cty"="GEOID"))
view(md_smith_data)
md_smith_data %>%
select(NAME, census_response_rate2020) %>%
arrange(desc())
md_smith_data %>%
select(NAME, census_response_rate2020) %>%
arrange(desc(census_response_rate2020))
md_tracts <- rio::import("maryland_tracts.xls")
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
library(tidyverse)
library(janitor)
md_tracts <- rio::import("maryland_tracts.xls")
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
md_smith_data <- md_tracts %>%
inner_join(md_counties, by=c("cty"="GEOID"))
md_tracts <- rio::import("maryland_tracts.xls")
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
md_smith_data <- md_tracts %>%
inner_join(md_counties, by=c("cty"="geoid"))
view(md_smith_data)
md_smith_data %>%
select(name, census_response_rate2020) %>%
arrange(desc(census_response_rate2020))
md_smith_data %>%
select(name, census_response_rate2020) %>%
summary(md_smith_data)
#select values and arrange descending to find the top value
md_smith_data %>%
select(name, census_response_rate2020) %>%
arrange(desc(census_response_rate2020))
md_smith_data %>%
select(name, census_response_rate2020) %>%
slice_min(census_response_rate2020, n=10)
