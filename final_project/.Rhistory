absentee_provisional = "absentee_provisional_2",
percent = "percentage")
x12_gen_results
#based on rob wells comment, need to convert these to dataframes and do more to combine them. will ask in class/office hours
#ask prof willis and prof wells about how to isolate specifically the general election -- want to see how voting has changed in the general elections
emp_2021 <- read.table("cbp21co.txt", header = TRUE, sep = "\t")
emp_2021 <- read.table("cbp21st.txt", header = TRUE, sep = "\t")
emp_2021 <- janitor::clean_names()
emp_2021 <- read.table("cbp21st.txt")
View(emp_2021)
data <- read.fwf("path_to_your_file.txt", widths = c(10, 20, 5))  # Specify the widths of each field
data <- read.fwf("cbp21st.txt", widths = c(10, 20, 5))  # Specify the widths of each field
data <- janitor::clean_names(data)
data <- read.fwf("cbp21st.txt", widths = c(10, 20, 5))  # Specify the widths of each field
View(data)
data <- janitor::clean_names(data)
chunk_size <- 1000  # Define how many rows per chunk
total_rows <- 50000  # You may need to adjust this based on the actual number of rows
for (i in seq(1, total_rows, by = chunk_size)) {
chunk <- read.table("cbp21st.txt", sep = "\t", header = FALSE, nrows = chunk_size, skip = i-1)
# Process the chunk
print(nrow(chunk))  # Example action
}
View(chunk)
readr("cbp21st.txt")
install.packages(readr)
install.packages("readr")
library(readr)
readr("cbp21st.txt")
<div class="flourish-embed flourish-chart" data-src="visualisation/17783968"><script src="https://public.flourish.studio/resources/embed.js"></script></div>
cat('<iframe src="EMBED_CODE_FROM_FLOURISH" width="WIDTH" height="HEIGHT" frameborder="0" scrolling="no"></iframe>')
cat('<iframe src="<div class="flourish-embed flourish-chart" data-src="visualisation/17783968"><script src="https://public.flourish.studio/resources/embed.js"></script></div>" width="WIDTH" height="HEIGHT" frameborder="0" scrolling="no"></iframe>')
cat('<iframe src="<div class="flourish-embed flourish-chart" data-src="visualisation/17783968"><script src="https://public.flourish.studio/resources/embed.js"></script></div>"></iframe>')
library(tidyverse)
library(tidycensus)
library(rvest)
library(janitor)
library(formattable)
#census key
census_api_key("423292f0a0d4b5f0fe4ce722f283f6af07c21c84", install=TRUE, overwrite=TRUE)
readRenviron("~/.Renviron")
#load in census data through my API
acs_vars <- load_variables("acs5", year = 2020)
#grab maryland section, divide by county by race for both 2010 and 2020. I want to get these both to see how diverse populations have changed over time in these counties.
x2020_md <- get_acs(geography = "county",
variables = c(white = "B02001_002",
black = "B02001_003",
american_ind = "B02001_004",
asian = "B02001_005",
pacif_islander = "B02001_006",
hispanic = "B03002_001"),
state = "MD",
year = 2020)
x2010_md <- get_acs(geography = "county",
variables = c(white = "B02001_002",
black = "B02001_003",
american_ind = "B02001_004",
asian = "B02001_005",
pacif_islander = "B02001_006",
hispanic = "B03002_001"),
state = "MD",
year = 2010)
View(x2020_md)
acs_vars <- load_variables("acs5", year = 2020)
#maryland 2020 and maryland 2010 demographics -- i can pull from the same parts of the Census API since I'm just choosing a different geographical region, such as state instead of county.
x2020_state <- get_acs(geography = "state",
variables = c(white = "B02001_002",
black = "B02001_003",
american_ind = "B02001_004",
asian = "B02001_005",
pacif_islander = "B02001_006",
hispanic = "B03002_001"),
state = "MD",
year = 2020)
x2010_state <- get_acs(geography = "state",
variables = c(white = "B02001_002",
black = "B02001_003",
american_ind = "B02001_004",
asian = "B02001_005",
pacif_islander = "B02001_006",
hispanic = "B03002_001"),
state = "MD",
year = 2010)
View(x2010_state)
#read in the html and extract all the tables
x20_results <- "https://elections.maryland.gov/elections/2020/results/general/gen_results_2020_4_by_county_07-1.html" %>%
read_html() %>%
html_table()
x20_results <- x20_results[[2]]
x16_results <- "https://elections.maryland.gov/elections/2016/results/general/gen_results_2016_4_by_county_07-1.html" %>%   read_html() %>%
html_table()
x16_results <- x16_results[[1]]
x12_results <- "https://elections.maryland.gov/elections/2012/results/general/gen_results_2012_4_by_county_07-1.html" %>%
read_html() %>%
html_table()
x12_results <- x12_results[[1]]
#read in the html and extract all the tables
x20_results <- "https://elections.maryland.gov/elections/2020/results/general/gen_results_2020_4_by_county_07-1.html" %>%
read_html() %>%
html_table()
x20_results <- x20_results[[2]]
x16_results <- "https://elections.maryland.gov/elections/2016/results/general/gen_results_2016_4_by_county_07-1.html" %>%   read_html() %>%
html_table()
x16_results <- x16_results[[1]]
x12_results <- "https://elections.maryland.gov/elections/2012/results/general/gen_results_2012_4_by_county_07-1.html" %>%
read_html() %>%
html_table()
x12_results <- x12_results[[1]]
#had to do a bit more cleaning on this table -- for some reason, it recognized information above the table as an actual table, and i had to do a lot more cleaning to ensure numbers were recognized by the program.
x20_results_clean <- x20_results %>%
mutate(
Early_Voting = as.numeric(gsub("[^0-9.]", "", `Early Voting`)),  # Remove non-numeric characters and convert to numeric
Election_Day = as.numeric(gsub("[^0-9.]", "", `Election Day`)),
By_Mail = as.numeric(gsub("[^0-9.]", "", `By Mail`)),
Total = as.numeric(gsub("[^0-9.]", "", Total)),
Percent = as.numeric(gsub("[^0-9.]", "", Percent))
) %>%
clean_names()
x16_results_clean <- x16_results %>%
mutate(
Early_Voting = as.numeric(gsub("[^0-9.]", "", `Early Voting`)),
Election_Day = as.numeric(gsub("[^0-9.]", "", `Election Day`)),
Absentee_Provisional = as.numeric(gsub("[^0-9.]", "", `Absentee / Provisional`)),
Total = as.numeric(gsub("[^0-9.]", "", Total)),
Percentage = as.numeric(gsub("[^0-9.]", "", Percentage))
) %>%
clean_names()
x12_results_clean <- x12_results %>%
mutate(
Early_Voting = as.numeric(gsub("[^0-9.]", "", `Early Voting`)),
Election_Day = as.numeric(gsub("[^0-9.]", "", `Election Day`)),
Absentee_Provisional = as.numeric(gsub("[^0-9.]", "", `Absentee / Provisional`)),
Total = as.numeric(gsub("[^0-9.]", "", Total)),
Percentage = as.numeric(gsub("[^0-9.]", "", Percentage))
) %>%
clean_names()
#Based on this analysis with percentage, it appears that Carroll County has always skewed Republican in general elections since 2012. Interestingly enough, less of the voting population seems to have voted for the Republican candidates as the years have gone on. From a 64.8% percent voting for Romney to 63.4% for Trump in 2016 and a later 60% for Trump in 2020, support for Republican candidates has actually slightly waned. Can this be attributed to less people showing up to the polls, or some other reason? As I work in Carroll County, I'll use this analysis to inform my reporting.
x20_gen_results <- x20_results_clean %>%
select(name, party, early_voting_2, election_day_2,by_mail_2,total,percent) %>%
rename(early_voting = "early_voting_2",
election_day = "election_day_2",
by_mail = "by_mail_2")
x16_gen_results <- x16_results_clean %>%
select(name, party, early_voting_2, election_day_2,absentee_provisional_2,total,percentage) %>%
rename(early_voting = "early_voting_2",
election_day = "election_day_2",
absentee_provisional = "absentee_provisional_2",
percent = "percentage")
x12_gen_results <- x12_results_clean %>%
select(name, party, early_voting_2, election_day_2, absentee_provisional_2, total, percentage) %>%
rename(early_voting = "early_voting_2",
election_day = "election_day_2",
absentee_provisional = "absentee_provisional_2",
percent = "percentage")
x12_result_md <- "https://elections.maryland.gov/elections/2012/results/general/gen_results_2012_4_001-.html" %>%
read_html() %>%
html_table()
x12_result_md <- x12_result_md[[1]]
head(x12_result_md)
View(x12_gen_results)
#pull in data from the state elections
x12_result_md <- "https://elections.maryland.gov/elections/2012/results/general/gen_results_2012_4_001-.html" %>%
read_html() %>%
html_table()
x12_result_md <- x12_result_md[[1]]
x16_result_md <- "https://elections.maryland.gov/elections/2016/results/general/gen_results_2016_4_001-.html" %>%
read_html() %>%
html_table()
x16_result_md <- x16_result_md[[1]]
x20_result_md <- "https://elections.maryland.gov/elections/2020/results/general/gen_results_2020_4_001-.html" %>%
read_html() %>%
html_table()
x20_result_md <- x20_result_md[[2]]
head(x12_result_md)
head(x16_result_md)
head(x20_result_md)
x20_gen_results <- x20_results_clean %>%
select(name, party, early_voting_2, election_day_2,by_mail_2,total,percent) %>%
rename(early_voting = "early_voting_2",
election_day = "election_day_2",
by_mail = "by_mail_2")
x16_gen_results <- x16_results_clean %>%
select(name, party, early_voting_2, election_day_2,absentee_provisional_2,total,percentage) %>%
rename(early_voting = "early_voting_2",
election_day = "election_day_2",
absentee_provisional = "absentee_provisional_2",
percent = "percentage")
x12_gen_results <- x12_results_clean %>%
select(name, party, early_voting_2, election_day_2, absentee_provisional_2, total, percentage) %>%
rename(early_voting = "early_voting_2",
election_day = "election_day_2",
absentee_provisional = "absentee_provisional_2",
percent = "percentage")
#Based on this analysis with percentage, it appears that Carroll County has always skewed Republican in general elections since 2012. Interestingly enough, less of the voting population seems to have voted for the Republican candidates as the years have gone on. From a 64.8% percent voting for Romney to 63.4% for Trump in 2016 and a later 60% for Trump in 2020, support for Republican candidates has actually slightly waned. Can this be attributed to less people showing up to the polls, or some other reason? As I work in Carroll County, I'll use this analysis to inform my reporting.
View(x20_gen_results)
View(x16_gen_results)
View(x12_gen_results)
x20_md_median_income <- get_acs(geography = "county",
variables = c(median_income = "B06011_001"),
state = "MD",
year = 2020)
x10_md_median_income <- get_acs(geography = "county",
variables = c(median_income = "B06011_001"),
state = "MD",
year = 2010)
View(x20_md_median_income)
#https://www.census.gov/programs-surveys/cbp/data/datasets.html where I grabbed my new data from
#semi-good dataframes
x2021_employment_carroll <- read.csv("industry_employment_carroll.csv") %>%
clean_names()
x2015_employment_carroll <- read.csv("Occupations.csv") %>%
clean_names()
View(x2021_employment_carroll)
View(x2015_employment_carroll)
View(acs_vars)
x20_jobs_census <- get_acs(geography = "state",
variables = c(jobs="B24012_001"))
View(x20_jobs_census)
x2021_employment_carroll <- read.csv("industry_employment_carroll.csv") %>%
clean_names()
x2015_employment_carroll <- read.csv("Occupations.csv") %>%
clean_names()
x2021_employment_carroll <- read.csv("industry_employment_carroll.csv") %>%
select(occupation, median_earnings,workforce_growth)
x2015_employment_carroll <- read.csv("Occupations.csv") %>%
select(occupation, median_earnings,workforce_growth) %>%
clean_names()
#https://www.census.gov/programs-surveys/cbp/data/datasets.html where I grabbed my new data from
#Pulling up the dataframes
x2021_employment_carroll <- read.csv("industry_employment_carroll.csv") %>%
clean_names()
x2015_employment_carroll <- read.csv("Occupations.csv") %>%
clean_names()
#https://datausa.io/profile/geo/carroll-county-md?growthOccupations=growth&measureOccupations=workforce where I grabbed my new data from. a lot of this is also aligned with census data
#Pulling up the dataframe
employment_carroll <- read.csv("Occupations.csv") %>%
clean_names()
employment_carroll %>%
arrange(desc(workforce_growth))
head_employment_carroll
employment_carroll %>%
select(group,subgroup,occupation,year,median_earnings,workforce_growth) %>%
arrange(desc(workforce_growth))
head_employment_carroll
employment_carroll %>%
select(group,subgroup,occupation,year,median_earnings,workforce_growth) %>%
arrange(desc(workforce_growth))
head(employment_carroll)
employment_carroll %>%
select(group,subgroup,occupation,year,median_earnings,workforce_growth) %>%
arrange(desc(workforce_growth))
#census key -- i removed my personal key
census_api_key("423292f0a0d4b5f0fe4ce722f283f6af07c21c84", install=TRUE, overwrite=TRUE)
library(tidyverse)
library(tidycensus)
library(rvest)
library(janitor)
library(formattable)
#census key -- i removed my personal key
census_api_key("423292f0a0d4b5f0fe4ce722f283f6af07c21c84", install=TRUE, overwrite=TRUE)
readRenviron("~/.Renviron")
#grab the data by county for median income
x20_md_median_income <- get_acs(geography = "county",
variables = c(median_income = "B06011_001"),
state = "MD",
year = 2020)
x10_md_median_income <- get_acs(geography = "county",
variables = c(median_income = "B06011_001"),
state = "MD",
year = 2010)
View(x10_md_median_income)
library(vcd)
grade_data <- data.frame(
Grade = c("A", "B", "C", "D", "F"),
Percentage = c(0.2, 0.3, 0.3, 0.1, 0.1),
`Sample Size` = 400,
`Expected Frequency` = c(80, 120, 120, 40, 40),
`Observed Frequency` = c(100, 125, 100, 45, 30)
)
grade_data
chisq_result <- chisq.test('Expected.Frequency', p = 'Observed.Frequency')
chisq_result <- chisq.test(grade_data, p = expected.frequency)
grade_data <- data.frame(
Grade = c("A", "B", "C", "D", "F"),
Percentage = c(0.2, 0.3, 0.3, 0.1, 0.1),
`Sample Size` = 400,
`Expected Frequency` = c(80, 120, 120, 40, 40),
`Observed Frequency` = c(100, 125, 100, 45, 30)
)
grade_data
install.packages("vcd")
library(vcd)
install.packages("vcd")
chisq_result <- chisq.test(grade_data$Observed.Frequency, p = grade_data$Expected.Frequency)
chisq_result <- chisq.test(grade_data$Observed.Frequency, p = grade_data$Percentage)
chisq_result
alpha <- 0.10
df <- length(grades_data$Grade) - 1
alpha <- 0.10
df <- length(grade_data$Grade) - 1
critical_value <- qchisq(alpha, df, lower.tail = FALSE)
critical_value
library(tidyverse)
library(tidycensus)
library(rvest)
library(janitor)
library(formattable)
library(tidyverse)
library(lubridate)
library(tidyverse)
library(lubridate)
vehicle_data <- read_csv("https://raw.githubusercontent.com/dwillis/jour405_files/main/electric_hybrid_0424.csv")
View(vehicle_data)
# Correlation between electric and hybrid vehicles
cor_test <- cor.test(vehicle_data$Electric, vehicle_data$Hybrid)
cor_test
# Comparing electric and hybrid vehicle registrations using paired t-test
t_test <- t.test(vehicle_data$Electric, vehicle_data$Hybrid, paired = TRUE)
t_test
# Fit the linear regression model
model <- lm(Hybrid ~ Electric, data = vehicle_data)
# Summarize the model to view coefficients and statistics
summary(model)
residuals <- residuals(model)
# Basic summary of residuals
summary(residuals)
# Make predictions
predictions <- predict(model, newdata = vehicle_data)
# Add predictions and residuals to the original data
vehicle_data$Predicted_Hybrid <- predictions
vehicle_data$Residuals <- residuals
# View the updated data frame
vehicle_data |> arrange(desc(Residuals))
county_evs <- read_csv("https://raw.githubusercontent.com/dwillis/jour405_files/main/evs/{county}.csv")
# Calculate total registrations and registrations per capita
vehicle_data <- vehicle_data %>%
mutate(
Total_Registrations = Electric + Hybrid,
Electric_per_1000 = (Electric / Population) * 1000,
Hybrid_per_1000 = (Hybrid / Population) * 1000
)
# Display summary by county
vehicle_data %>%
arrange(desc(Total_Registrations))
# Correlation between electric and hybrid vehicles
cor_test <- cor.test(vehicle_data$Electric, vehicle_data$Hybrid)
cor_test
# Comparing electric and hybrid vehicle registrations using paired t-test
t_test <- t.test(vehicle_data$Electric, vehicle_data$Hybrid, paired = TRUE)
t_test
residuals <- residuals(model)
# Basic summary of residuals
summary(residuals)
residuals <- residuals(model)
# Basic summary of residuals
summary(residuals)
md_traffic <- read_csv("mdot_daily_traffic.csv") %>%
clean_names()
View(md_traffic)
county_evs <- read_csv("https://raw.githubusercontent.com/dwillis/jour405_files/main/evs/carroll.csv")
county_evs <- county_evs %>%
mutate(Year_Month = ym(Year_Month))
model_electric <- lm(ELECTRIC ~ Year_Month, data = county_evs)
model_plugin <- lm(`PLUG-IN HYBRID` ~ Year_Month, data = county_evs)
summary(model_electric)
summary(model_plugin)
View(county_evs)
# Electric Vehicles Plot
ggplot(county_evs, aes(x = Year_Month, y = ELECTRIC)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(title = "Electric Vehicle Registrations Over Time",
x = "Year and Month", y = "Electric Vehicle Registrations")
# Plug-In Hybrids Plot
ggplot(county_evs, aes(x = Year_Month, y = `PLUG-IN HYBRID`)) +
geom_point() +
geom_smooth(method = "lm", color = "red") +
labs(title = "Plug-In Hybrid Vehicle Registrations Over Time",
x = "Year and Month", y = "Plug-In Hybrid Registrations")
vehicle_data <- read_csv("https://raw.githubusercontent.com/dwillis/jour405_files/main/evs/maryland.csv")
vehicle_data <- vehicle_data %>%
mutate(Year_Month = ym(Year_Month))
ggplot(vehicle_data, aes(x = Year_Month)) +
geom_line(aes(y = ELECTRIC, colour = "Electric")) +
geom_line(aes(y = `PLUG-IN HYBRID`, colour = "Plug-In Hybrid")) +
facet_wrap(~County) +  # Creates a separate plot for each county
labs(
title = "Vehicle Registrations Over Time by County",
x = "Year and Month",
y = "Number of Registrations"
) +
scale_color_manual(
name = "Type",
values = c("Electric" = "blue", "Plug-In Hybrid" = "red")
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
md_traffic_clean <- md_traffic %>%
select(gis_object_id, county_name, rural_urban, functional_class, aadt_2013, aadt_2014, aadt_2015, aadt_2016, aadt_2017, aadt_current, aawdt_2013, aawdt_2014, aawdt_2015, aawdt_2016, aawdt_2017, aawdt_2018, aawdt_current)
View(md_traffic_clean)
vehicle_data <- read_csv("https://raw.githubusercontent.com/dwillis/jour405_files/main/evs/maryland.csv")
vehicle_data <- vehicle_data %>%
mutate(Year_Month = ym(Year_Month))
vehicle_data <- vehicle_data %>%
filter(!County %in% c('CARROLL', 'HOWARD', 'FREDERICK', 'ANNE ARUNDEL', 'PRINCE GEORGES', 'BALTIMORE'))
ggplot(vehicle_data, aes(x = Year_Month)) +
geom_line(aes(y = ELECTRIC, colour = "Electric")) +
geom_line(aes(y = `PLUG-IN HYBRID`, colour = "Plug-In Hybrid")) +
facet_wrap(~County) +  # Creates a separate plot for each county
labs(
title = "Vehicle Registrations Over Time by County",
x = "Year and Month",
y = "Number of Registrations"
) +
scale_color_manual(
name = "Type",
values = c("Electric" = "blue", "Plug-In Hybrid" = "red")
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
vehicle_data <- read_csv("https://raw.githubusercontent.com/dwillis/jour405_files/main/evs/maryland.csv")
vehicle_data <- vehicle_data %>%
mutate(Year_Month = ym(Year_Month))
vehicle_data <- vehicle_data %>%
filter(!County %in% c('MONTGOMERY','HOWARD', 'FREDERICK', 'ANNE ARUNDEL', 'PRINCE GEORGES', 'BALTIMORE'))
ggplot(vehicle_data, aes(x = Year_Month)) +
geom_line(aes(y = ELECTRIC, colour = "Electric")) +
geom_line(aes(y = `PLUG-IN HYBRID`, colour = "Plug-In Hybrid")) +
facet_wrap(~County) +  # Creates a separate plot for each county
labs(
title = "Vehicle Registrations Over Time by County",
x = "Year and Month",
y = "Number of Registrations"
) +
scale_color_manual(
name = "Type",
values = c("Electric" = "blue", "Plug-In Hybrid" = "red")
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
md_traffic_clean <- md_traffic %>%
select(gis_object_id, county_name, rural_urban, functional_class, aadt_2013, aadt_2014, aadt_2015, aadt_2016, aadt_2017, aadt_current, aawdt_2013, aawdt_2014, aawdt_2015, aawdt_2016, aawdt_2017, aawdt_2018, aawdt_current) %>%
filter(functional_class == "Interstate")
acs_vars <- load_variables("acs5", year = 2020)
#maryland 2020 and maryland 2010 demographics -- i can pull from the same parts of the Census API since I'm just choosing a different geographical region, such as state instead of county.
x2020_state <- get_acs(geography = "state",
variables = c(white = "B02001_002",
black = "B02001_003",
american_ind = "B02001_004",
asian = "B02001_005",
pacif_islander = "B02001_006",
hispanic = "B03002_001"),
state = "MD",
year = 2020)
x2010_state <- get_acs(geography = "state",
variables = c(white = "B02001_002",
black = "B02001_003",
american_ind = "B02001_004",
asian = "B02001_005",
pacif_islander = "B02001_006",
hispanic = "B03002_001"),
state = "MD",
year = 2010)
cat('<iframe src="<div class="flourish-embed flourish-chart" data-src="visualisation/17783968"><script src="https://public.flourish.studio/resources/embed.js"></script></div>"></iframe>')
View(x2020_state)
acs_vars <- load_variables("acs5", year = 2020)
#maryland 2020 and maryland 2010 demographics -- i can pull from the same parts of the Census API since I'm just choosing a different geographical region, such as state instead of county.
x2020_state <- get_acs(geography = "state",
variables = c(white = "B02001_002",
black = "B02001_003",
american_ind = "B02001_004",
asian = "B02001_005",
pacif_islander = "B02001_006",
hispanic = "B03002_001"),
state = "MD",
year = 2020)
x2010_state <- get_acs(geography = "state",
variables = c(white = "B02001_002",
black = "B02001_003",
american_ind = "B02001_004",
asian = "B02001_005",
pacif_islander = "B02001_006",
hispanic = "B03002_001"),
state = "MD",
year = 2010)
#census key -- i removed my personal key
census_api_key("423292f0a0d4b5f0fe4ce722f283f6af07c21c84", install=TRUE, overwrite=TRUE)
readRenviron("~/.Renviron")
#load in census data through my API
acs_vars <- load_variables("acs5", year = 2020)
#grab maryland section, divide by county by race for both 2010 and 2020. I want to get these both to see how diverse populations have changed over time in these counties.
x2020_md <- get_acs(geography = "county",
variables = c(white = "B02001_002",
black = "B02001_003",
american_ind = "B02001_004",
asian = "B02001_005",
pacif_islander = "B02001_006",
hispanic = "B03002_001"),
state = "MD",
year = 2020)
x2010_md <- get_acs(geography = "county",
variables = c(white = "B02001_002",
black = "B02001_003",
american_ind = "B02001_004",
asian = "B02001_005",
pacif_islander = "B02001_006",
hispanic = "B03002_001"),
state = "MD",
year = 2010)
#census key -- i removed my personal key
census_api_key("423292f0a0d4b5f0fe4ce722f283f6af07c21c84", install=TRUE, overwrite=TRUE)
readRenviron("~/.Renviron")
